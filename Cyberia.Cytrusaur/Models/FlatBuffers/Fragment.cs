// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Cyberia.Cytrusaur.Models.FlatBuffers
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct Fragment : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_3_3(); }
        public static Fragment GetRootAsFragment(ByteBuffer _bb) { return GetRootAsFragment(_bb, new Fragment()); }
        public static Fragment GetRootAsFragment(ByteBuffer _bb, Fragment obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public Fragment __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
        public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
        public Cyberia.Cytrusaur.Models.FlatBuffers.GameFile? Files(int j) { int o = __p.__offset(6); return o != 0 ? (Cyberia.Cytrusaur.Models.FlatBuffers.GameFile?)(new Cyberia.Cytrusaur.Models.FlatBuffers.GameFile()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int FilesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }
        public Cyberia.Cytrusaur.Models.FlatBuffers.Bundle? Bundles(int j) { int o = __p.__offset(8); return o != 0 ? (Cyberia.Cytrusaur.Models.FlatBuffers.Bundle?)(new Cyberia.Cytrusaur.Models.FlatBuffers.Bundle()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int BundlesLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

        public static Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Fragment> CreateFragment(FlatBufferBuilder builder,
            StringOffset nameOffset = default(StringOffset),
            VectorOffset filesOffset = default(VectorOffset),
            VectorOffset bundlesOffset = default(VectorOffset)) {
            builder.StartTable(3);
            Fragment.AddBundles(builder, bundlesOffset);
            Fragment.AddFiles(builder, filesOffset);
            Fragment.AddName(builder, nameOffset);
            return Fragment.EndFragment(builder);
        }

        public static void StartFragment(FlatBufferBuilder builder) { builder.StartTable(3); }
        public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
        public static void AddFiles(FlatBufferBuilder builder, VectorOffset filesOffset) { builder.AddOffset(1, filesOffset.Value, 0); }
        public static VectorOffset CreateFilesVector(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaur.Models.FlatBuffers.GameFile>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaur.Models.FlatBuffers.GameFile>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Cyberia.Cytrusaur.Models.FlatBuffers.GameFile>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateFilesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Cyberia.Cytrusaur.Models.FlatBuffers.GameFile>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartFilesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddBundles(FlatBufferBuilder builder, VectorOffset bundlesOffset) { builder.AddOffset(2, bundlesOffset.Value, 0); }
        public static VectorOffset CreateBundlesVector(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Bundle>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Bundle>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Bundle>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateBundlesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Bundle>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartBundlesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Fragment> EndFragment(FlatBufferBuilder builder) {
            int o = builder.EndTable();
            return new Offset<Cyberia.Cytrusaur.Models.FlatBuffers.Fragment>(o);
        }

        private Dictionary<int, GameFile> GetFiles()
        {
            Dictionary<int, GameFile> files = new();

            for (int i = 0; i < FilesLength; i++)
                files.Add(i, Files(i).Value);

            return files;
        }

        internal List<string> Diff(Fragment model)
        {
            List<KeyValuePair<int, string>> diff = new()
            {
                new(-1,  $@"// {Name.ToUpper()} \\")
            };

            Dictionary<int, GameFile> currentFiles = GetFiles();
            Dictionary<int, GameFile> oldFiles = model.GetFiles();

            Dictionary<string, int> oldFileKeys = new();
            foreach (KeyValuePair<int, GameFile> file in oldFiles)
                oldFileKeys[file.Value.Name] = file.Key;

            HashSet<int> processedKeys = new();
            foreach (KeyValuePair<int, GameFile> file in currentFiles)
            {
                if (oldFileKeys.TryGetValue(file.Value.Name, out int oldKey))
                {
                    GameFile oldFile = oldFiles[oldKey];

                    if (!file.Value.GetHashArray().SequenceEqual(oldFile.GetHashArray()))
                        diff.Add(new(file.Key, $"~ {file.Value.Name} {(oldFile.Size == file.Value.Size ? "" : $"({oldFile.Size} -> {file.Value.Size})")}"));

                    processedKeys.Add(oldKey);
                }
                else
                    diff.Add(new(file.Key, $"+ {file.Value.Name}"));
            }

            foreach (int key in oldFiles.Keys.Except(processedKeys))
                diff.Add(new(key, $"- {oldFiles[key].Name}"));

            return diff.OrderBy(x => x.Key).Select(x => x.Value).ToList();
        }
    }
}
