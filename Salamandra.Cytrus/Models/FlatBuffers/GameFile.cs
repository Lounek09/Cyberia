// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Salamandra.Cytrus.Models.FlatBuffers
{

    using global::System;
    using global::System.Collections.Generic;
    using global::Google.FlatBuffers;

    public struct GameFile : IFlatbufferObject
    {
        private Table __p;
        public ByteBuffer ByteBuffer { get { return __p.bb; } }
        public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_23_1_21(); }
        public static GameFile GetRootAsFile(ByteBuffer _bb) { return GetRootAsFile(_bb, new GameFile()); }
        public static GameFile GetRootAsFile(ByteBuffer _bb, GameFile obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
        public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
        public GameFile __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

        public string Name { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
#if ENABLE_SPAN_T
        public Span<byte> GetNameBytes() { return __p.__vector_as_span<byte>(4, 1); }
#else
        public ArraySegment<byte>? GetNameBytes() { return __p.__vector_as_arraysegment(4); }
#endif
        public byte[] GetNameArray() { return __p.__vector_as_array<byte>(4); }
        public long Size { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetLong(o + __p.bb_pos) : (long)0; } }
        public sbyte Hash(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
        public int HashLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
        public Span<sbyte> GetHashBytes() { return __p.__vector_as_span<sbyte>(8, 1); }
#else
        public ArraySegment<byte>? GetHashBytes() { return __p.__vector_as_arraysegment(8); }
#endif
        public sbyte[] GetHashArray() { return __p.__vector_as_array<sbyte>(8); }
        public Salamandra.Cytrus.Models.FlatBuffers.Chunk? Chunks(int j) { int o = __p.__offset(10); return o != 0 ? (Salamandra.Cytrus.Models.FlatBuffers.Chunk?)(new Salamandra.Cytrus.Models.FlatBuffers.Chunk()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
        public int ChunksLength { get { int o = __p.__offset(10); return o != 0 ? __p.__vector_len(o) : 0; } }
        public bool Executable { get { int o = __p.__offset(12); return o != 0 ? 0!=__p.bb.Get(o + __p.bb_pos) : (bool)false; } }
        public string Symlink { get { int o = __p.__offset(14); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
    #if ENABLE_SPAN_T
        public Span<byte> GetSymlinkBytes() { return __p.__vector_as_span<byte>(14, 1); }
    #else
        public ArraySegment<byte>? GetSymlinkBytes() { return __p.__vector_as_arraysegment(14); }
    #endif
        public byte[] GetSymlinkArray() { return __p.__vector_as_array<byte>(14); }

        public static Offset<Salamandra.Cytrus.Models.FlatBuffers.GameFile> CreateFile(FlatBufferBuilder builder,
            StringOffset nameOffset = default(StringOffset),
            long size = 0,
            VectorOffset hashOffset = default(VectorOffset),
            VectorOffset chunksOffset = default(VectorOffset),
            bool executable = false,
            StringOffset symlinkOffset = default(StringOffset)) {
            builder.StartTable(6);
            GameFile.AddSize(builder, size);
            GameFile.AddSymlink(builder, symlinkOffset);
            GameFile.AddChunks(builder, chunksOffset);
            GameFile.AddHash(builder, hashOffset);
            GameFile.AddName(builder, nameOffset);
            GameFile.AddExecutable(builder, executable);
            return GameFile.EndFile(builder);
        }

        public static void StartFile(FlatBufferBuilder builder) { builder.StartTable(6); }
        public static void AddName(FlatBufferBuilder builder, StringOffset nameOffset) { builder.AddOffset(0, nameOffset.Value, 0); }
        public static void AddSize(FlatBufferBuilder builder, long size) { builder.AddLong(1, size, 0); }
        public static void AddHash(FlatBufferBuilder builder, VectorOffset hashOffset) { builder.AddOffset(2, hashOffset.Value, 0); }
        public static VectorOffset CreateHashVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
        public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartHashVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
        public static void AddChunks(FlatBufferBuilder builder, VectorOffset chunksOffset) { builder.AddOffset(3, chunksOffset.Value, 0); }
        public static VectorOffset CreateChunksVector(FlatBufferBuilder builder, Offset<Salamandra.Cytrus.Models.FlatBuffers.Chunk>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
        public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, Offset<Salamandra.Cytrus.Models.FlatBuffers.Chunk>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Salamandra.Cytrus.Models.FlatBuffers.Chunk>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
        public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Salamandra.Cytrus.Models.FlatBuffers.Chunk>>(dataPtr, sizeInBytes); return builder.EndVector(); }
        public static void StartChunksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
        public static void AddExecutable(FlatBufferBuilder builder, bool executable) { builder.AddBool(4, executable, false); }
        public static void AddSymlink(FlatBufferBuilder builder, StringOffset symlinkOffset) { builder.AddOffset(5, symlinkOffset.Value, 0); }
        public static Offset<Salamandra.Cytrus.Models.FlatBuffers.GameFile> EndFile(FlatBufferBuilder builder) {
            int o = builder.EndTable();
            return new Offset<Salamandra.Cytrus.Models.FlatBuffers.GameFile>(o);
        }
    }
}
