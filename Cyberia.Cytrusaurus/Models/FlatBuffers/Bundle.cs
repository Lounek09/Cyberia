// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Cyberia.Cytrusaurus.Models.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Bundle : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_24_3_7(); }
  public static Bundle GetRootAsBundle(ByteBuffer _bb) { return GetRootAsBundle(_bb, new Bundle()); }
  public static Bundle GetRootAsBundle(ByteBuffer _bb, Bundle obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Bundle __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public sbyte Hash(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetSbyte(__p.__vector(o) + j * 1) : (sbyte)0; }
  public int HashLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<sbyte> GetHashBytes() { return __p.__vector_as_span<sbyte>(4, 1); }
#else
  public ArraySegment<byte>? GetHashBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public sbyte[] GetHashArray() { return __p.__vector_as_array<sbyte>(4); }
  public Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk? Chunks(int j) { int o = __p.__offset(6); return o != 0 ? (Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk?)(new Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int ChunksLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Bundle> CreateBundle(FlatBufferBuilder builder,
      VectorOffset hashOffset = default(VectorOffset),
      VectorOffset chunksOffset = default(VectorOffset)) {
    builder.StartTable(2);
    Bundle.AddChunks(builder, chunksOffset);
    Bundle.AddHash(builder, hashOffset);
    return Bundle.EndBundle(builder);
  }

  public static void StartBundle(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddHash(FlatBufferBuilder builder, VectorOffset hashOffset) { builder.AddOffset(0, hashOffset.Value, 0); }
  public static VectorOffset CreateHashVector(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddSbyte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, sbyte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, ArraySegment<sbyte> data) { builder.StartVector(1, data.Count, 1); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateHashVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<sbyte>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartHashVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static void AddChunks(FlatBufferBuilder builder, VectorOffset chunksOffset) { builder.AddOffset(1, chunksOffset.Value, 0); }
  public static VectorOffset CreateChunksVector(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateChunksVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Chunk>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartChunksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Bundle> EndBundle(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Bundle>(o);
  }
}


static public class BundleVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Hash*/, 1 /*sbyte*/, false)
      && verifier.VerifyVectorOfTables(tablePos, 6 /*Chunks*/, Cyberia.Cytrusaurus.Models.FlatBuffers.ChunkVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
