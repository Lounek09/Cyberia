// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace Cyberia.Cytrusaurus.Models.FlatBuffers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct Manifest : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static Manifest GetRootAsManifest(ByteBuffer _bb) { return GetRootAsManifest(_bb, new Manifest()); }
  public static Manifest GetRootAsManifest(ByteBuffer _bb, Manifest obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyManifest(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, ManifestVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public Manifest __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment? Fragments(int j) { int o = __p.__offset(4); return o != 0 ? (Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment?)(new Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int FragmentsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Manifest> CreateManifest(FlatBufferBuilder builder,
      VectorOffset fragmentsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    Manifest.AddFragments(builder, fragmentsOffset);
    return Manifest.EndManifest(builder);
  }

  public static void StartManifest(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddFragments(FlatBufferBuilder builder, VectorOffset fragmentsOffset) { builder.AddOffset(0, fragmentsOffset.Value, 0); }
  public static VectorOffset CreateFragmentsVector(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, ArraySegment<Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment>> data) { builder.StartVector(4, data.Count, 4); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateFragmentsVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Fragment>>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartFragmentsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Manifest> EndManifest(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Manifest>(o);
  }
  public static void FinishManifestBuffer(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Manifest> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedManifestBuffer(FlatBufferBuilder builder, Offset<Cyberia.Cytrusaurus.Models.FlatBuffers.Manifest> offset) { builder.FinishSizePrefixed(offset.Value); }
}


static public class ManifestVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfTables(tablePos, 4 /*Fragments*/, Cyberia.Cytrusaurus.Models.FlatBuffers.FragmentVerify.Verify, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
